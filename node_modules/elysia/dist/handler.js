// @ts-ignore
import{serialize as e}from"cookie";import{StatusMap as s}from"./utils";import{Cookie as r}from"./cookie";let t="toJSON"in new Headers;export const isNotEmpty=e=>{for(let s in e)return!0;return!1};export const parseSetCookies=(e,s)=>{if(!e||!Array.isArray(s))return e;e.delete("Set-Cookie");for(let r=0;r<s.length;r++){let t=s[r].indexOf("=");e.append("Set-Cookie",`${s[r].slice(0,t)}=${s[r].slice(t+1)}`)}return e};export const cookieToHeader=s=>{if(!s||"object"!=typeof s||!isNotEmpty(s))return;let r=[];for(let[t,n]of Object.entries(s))if(t&&n){if(Array.isArray(n.value))for(let s=0;s<n.value.length;s++){let o=n.value[s];null!=o&&("object"==typeof o&&(o=JSON.stringify(o)),r.push(e(t,o,n)))}else{let s=n.value;if(null==s)continue;"object"==typeof s&&(s=JSON.stringify(s)),r.push(e(t,n.value,n))}}if(0!==r.length)return 1===r.length?r[0]:r};export const mapResponse=(e,n)=>{if(isNotEmpty(n.headers)||200!==n.status||n.redirect||n.cookie)switch("string"==typeof n.status&&(n.status=s[n.status]),n.redirect&&(n.headers.Location=n.redirect,(!n.status||n.status<300||n.status>=400)&&(n.status=302)),n.cookie&&isNotEmpty(n.cookie)&&(n.headers["Set-Cookie"]=cookieToHeader(n.cookie)),n.headers["Set-Cookie"]&&Array.isArray(n.headers["Set-Cookie"])&&(n.headers=parseSetCookies(new Headers(n.headers),n.headers["Set-Cookie"])),e?.constructor?.name){case"String":case"Blob":return new Response(e,{status:n.status,headers:n.headers});case"Object":case"Array":return Response.json(e,n);case void 0:if(!e)return new Response("",n);return Response.json(e,n);case"Response":let o={...n.headers};if(t)n.headers=e.headers.toJSON();else for(let[s,r]of e.headers.entries())s in n.headers&&(n.headers[s]=r);for(let s in o)e.headers.append(s,o[s]);return e;case"Error":return errorToResponse(e,n);case"Promise":// @ts-ignore
return e.then(e=>mapResponse(e,n));case"Function":return mapResponse(e(),n);case"Number":case"Boolean":return new Response(e.toString(),n);case"Cookie":if(e instanceof r)return new Response(e.value,n);return new Response(e?.toString(),n);default:let a=JSON.stringify(e);if(123===a.charCodeAt(0))return n.headers["Content-Type"]||(n.headers["Content-Type"]="application/json"),new Response(JSON.stringify(e),n);return new Response(a,n)}else switch(e?.constructor?.name){case"String":case"Blob":return new Response(e);case"Object":case"Array":return new Response(JSON.stringify(e),{headers:{"content-type":"application/json"}});case void 0:if(!e)return new Response("");return new Response(JSON.stringify(e),{headers:{"content-type":"application/json"}});case"Response":return e;case"Error":return errorToResponse(e,n);case"Promise":// @ts-ignore
return e.then(e=>{let s=mapCompactResponse(e);return void 0!==s?s:new Response("")});// ? Maybe response or Blob
case"Function":return mapCompactResponse(e());case"Number":case"Boolean":return new Response(e.toString());case"Cookie":if(e instanceof r)return new Response(e.value,n);return new Response(e?.toString(),n);default:let i=JSON.stringify(e);if(123===i.charCodeAt(0))return new Response(JSON.stringify(e),{headers:{"Content-Type":"application/json"}});return new Response(i)}};export const mapEarlyResponse=(e,n)=>{if(null!=e){if(isNotEmpty(n.headers)||200!==n.status||n.redirect||n.cookie)switch("string"==typeof n.status&&(n.status=s[n.status]),n.redirect&&(n.headers.Location=n.redirect,(!n.status||n.status<300||n.status>=400)&&(n.status=302)),n.cookie&&isNotEmpty(n.cookie)&&(n.headers["Set-Cookie"]=cookieToHeader(n.cookie)),n.headers["Set-Cookie"]&&Array.isArray(n.headers["Set-Cookie"])&&(n.headers=parseSetCookies(new Headers(n.headers),n.headers["Set-Cookie"])),e?.constructor?.name){case"String":case"Blob":return new Response(e,n);case"Object":case"Array":return Response.json(e,n);case void 0:if(!e)return;return Response.json(e,n);case"Response":let o=Object.assign({},n.headers);if(t)// @ts-ignore
n.headers=e.headers.toJSON();else for(let[s,r]of e.headers.entries())s in n.headers||(n.headers[s]=r);for(let s in o)e.headers.append(s,o[s]);return e.status!==n.status&&(n.status=e.status),e;case"Promise":// @ts-ignore
return e.then(e=>{let s=mapEarlyResponse(e,n);if(void 0!==s)return s});case"Error":return errorToResponse(e,n);case"Function":return mapEarlyResponse(e(),n);case"Number":case"Boolean":return new Response(e.toString(),n);case"Cookie":if(e instanceof r)return new Response(e.value,n);return new Response(e?.toString(),n);default:let a=JSON.stringify(e);if(123===a.charCodeAt(0))return n.headers["Content-Type"]||(n.headers["Content-Type"]="application/json"),new Response(JSON.stringify(e),n);return new Response(a,n)}else switch(e?.constructor?.name){case"String":case"Blob":return new Response(e);case"Object":case"Array":return new Response(JSON.stringify(e),{headers:{"content-type":"application/json"}});case void 0:if(!e)return new Response("");return new Response(JSON.stringify(e),{headers:{"content-type":"application/json"}});case"Response":return e;case"Promise":// @ts-ignore
return e.then(e=>{let s=mapEarlyResponse(e,n);if(void 0!==s)return s});case"Error":return errorToResponse(e,n);case"Function":return mapCompactResponse(e());case"Number":case"Boolean":return new Response(e.toString());case"Cookie":if(e instanceof r)return new Response(e.value,n);return new Response(e?.toString(),n);default:let i=JSON.stringify(e);if(123===i.charCodeAt(0))return new Response(JSON.stringify(e),{headers:{"Content-Type":"application/json"}});return new Response(i)}}};export const mapCompactResponse=e=>{switch(e?.constructor?.name){case"String":case"Blob":return new Response(e);case"Object":case"Array":return new Response(JSON.stringify(e),{headers:{"content-type":"application/json"}});case void 0:if(!e)return new Response("");return new Response(JSON.stringify(e),{headers:{"content-type":"application/json"}});case"Response":return e;case"Error":return errorToResponse(e);case"Promise":// @ts-ignore
return e.then(e=>{let s=mapCompactResponse(e);return void 0!==s?s:new Response("")});// ? Maybe response or Blob
case"Function":return mapCompactResponse(e());case"Number":case"Boolean":return new Response(e.toString());default:let s=JSON.stringify(e);if(123===s.charCodeAt(0))return new Response(JSON.stringify(e),{headers:{"Content-Type":"application/json"}});return new Response(s)}};export const errorToResponse=(e,s)=>new Response(JSON.stringify({name:e?.name,message:e?.message,cause:e?.cause}),{status:s?.status!==200?s?.status??500:500,headers:s?.headers});